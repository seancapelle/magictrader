{"version":3,"sources":["../src/querybuilder.js"],"names":[],"mappings":";;AAAA,IAAM,UAAU,QAAQ,iBAAR,CAAhB;AACA,IAAM,SAAS,QAAQ,aAAR,CAAf;;eACgC,QAAQ,OAAR,C;;IAAxB,M,YAAA,M;IAAQ,K,YAAA,K;IAAO,I,YAAA,I;;AACvB,IAAM,UAAU,QAAQ,WAAR,CAAhB;;AAEA,IAAM,MAAM,OAAO,CAAP,EAAU,UAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAsB;AAC1C,SAAO,QAAQ;AACb,SAAQ,OAAO,QAAf,SAA2B,IADd;AAEb,QAAI,MAAM,IAAN,EAAY;AACd;AADc,KAAZ,CAFS;AAKb,UAAM;AALO,GAAR,EAMJ,IANI,CAMC,KAAK,IAAL,CAND,CAAP;AAOD,CARW,CAAZ;;AAUA,OAAO,OAAP,GAAiB;AAAA,SAAS;;;AAGxB,UAAM;AAAA,aAAM,QAAQ;AAClB,aAAQ,OAAO,QAAf,SAA2B,IAA3B,SAAmC,EADjB;AAElB,cAAM;AAFY,OAAR,CAAN;AAAA,KAHkB;;;AASxB,WAAO,IAAI,IAAJ,EAAU,CAAV,CATiB;;;;;;;;AAiBxB,SAAK,mBAAQ;AACX,UAAM,UAAU,IAAI,OAAJ,EAAhB;AACA,UAAM,UAAU,SAAV,OAAU,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAsB;AACpC,eAAO,IAAI,IAAJ,EAAU,IAAV,EAAgB,IAAhB,EACN,IADM,CACD,iBAAS;AACb,cAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AACpB,kBAAM,OAAN,CAAc;AAAA,qBAAK,QAAQ,OAAR,CAAgB,MAAhB,EAAwB,CAAxB,CAAL;AAAA,aAAd;AACA,mBAAO,QAAQ,IAAR,EAAc,OAAO,CAArB,EAAwB,IAAxB,CAAP,C;AACD,WAHD,MAGO;AACL,sBAAQ,OAAR,CAAgB,KAAhB;AACD;AACF,SARM,EASN,KATM,CASA;AAAA,iBAAO,QAAQ,OAAR,CAAgB,OAAhB,EAAyB,GAAzB,CAAP;AAAA,SATA,CAAP;AAUD,OAXD;AAYA,cAAQ,IAAR,EAAc,CAAd,EAAiB,IAAjB;;AAEA,aAAO,OAAP;AACD;;AAlCuB,GAAT;AAAA,CAAjB","file":"querybuilder.js","sourcesContent":["const request = require('request-promise')\nconst config = require('./config.js')\nconst { curryN, merge, prop } = require('ramda')\nconst Emitter = require('emitter20')\n\nconst get = curryN(3, (type, page, args) => {\n  return request({\n    uri: `${config.endpoint}/${type}`,\n    qs: merge(args, {\n      page\n    }),\n    json: true\n  }).then(prop(type))\n})\n\nmodule.exports = type => ({\n\n  /** Gets a resource by its id. */\n  find: id => request({\n    uri: `${config.endpoint}/${type}/${id}`,\n    json: true\n  }),\n\n  /** Gets a resource with a given query. */\n  where: get(type, 0),\n\n  /** Gets a resource with a given query (like where), but\n      returns an emitter that emits 3 events:\n      - data(card): emits a card when it is retrieved from the API\n      - error(err): emits an error if the request fails\n      - end(): called when all results have been retrieved\n  */\n  all: args => {\n    const emitter = new Emitter()\n    const getEmit = (type, page, args) => {\n      return get(type, page, args)\n      .then(items => {\n        if (items.length > 0) {\n          items.forEach(c => emitter.trigger('data', c))\n          return getEmit(type, page + 1, args) // RECURSION\n        } else {\n          emitter.trigger('end')\n        }\n      })\n      .catch(err => emitter.trigger('error', err))\n    }\n    getEmit(type, 1, args)\n\n    return emitter\n  }\n\n})\n"]}